With Extra Space  -  TC(O(n)), SC - O(n)

void rearrange(long long *arr, int n) 
{ 
	// Your code here
	int t[n];
	int s=0,l=n-1;
	int flag=1;
	for(int i=0;i<n;i++)
	{
	    if(flag)
	    {
	        t[i]=arr[l--];
	        flag=0;
	    }
	    else
	    {
	        t[i]=arr[s++];
	        flag=1;
	    }
	   
	}
	for(int i=0;i<n;i++)
	{
	    arr[i]=t[i];
	}
	 
}

Without Extra Space  -  TC -O(n), SC -O(1)

#Thinking 
even index : remaining maximum element.
odd index  : remaining minimum element.
 
max_index : Index of remaining maximum element
            (Moves from right to left)
min_index : Index of remaining minimum element
            (Moves from left to right)

Initialize: max_index = 'n-1'
            min_index = 0  
            max_element = arr[max_index] + 1 //can be any element which is more than the maximum value in array

For i = 0 to n-1            
    If 'i' is even
       arr[i] += arr[max_index] % max_element * max_element 
       max_index--     
    ELSE // if 'i' is odd
       arr[i] +=  arr[min_index] % max_element * max_element
       min_index++
       
#code

void rearrange(long long *arr, int n) 
{ 
	int max_idx = n - 1, min_idx = 0; 
  
    // store maximum element of array 
    int max_elem = arr[n - 1] + 1; 
  
    // traverse array elements 
    for (int i = 0; i < n; i++) { 
        // at even index : we have to put maximum element 
        if (i % 2 == 0) { 
            arr[i] += (arr[max_idx] % max_elem) * max_elem; 
            max_idx--; 
        } 
  
        // at odd index : we have to put minimum element 
        else { 
            arr[i] += (arr[min_idx] % max_elem) * max_elem; 
            min_idx++; 
        } 
    } 
  
    // array elements back to it's original form 
    for (int i = 0; i < n; i++) 
        arr[i] = arr[i] / max_elem; 
}
